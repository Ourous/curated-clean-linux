StdInt.bitand :== bitand
StdInt.bitor :== bitor
StdInt.bitxor :== bitxor
StdInt.bitnot :== bitnot
<{StdInt.<<}> :== shiftleft
<{StdInt.>>}> :== shiftright
<{StdInt.+_6}> :== addI
<{StdInt.-_7}> :== subI
<{StdInt.^_12}> :== powI
StdInt.zero_8 :== 0
<{StdInt.*_9}> :== multI
<{StdInt./_10}> :== divI
StdInt.one_11 :== 1
StdInt.isEven_18 !a_0 = eqI (mod a_0 2) 0
<{StdInt.<_17}> :== ltI
StdInt.abs_13 :== absI
<{StdInt.==_16}> :== eqI
StdInt.sign_14 !x_0 = case (eqI x_0 0) (True -> 0) (False -> case (gtI 0 x_0) (True -> -1) (False -> 1))
<{StdInt.~_15}> :== negI
StdInt.isOdd_19 !a_0 = eqI (mod a_0 2) 1
StdInt.toInt_20 :== C2I || char -> int
StdInt.toInt_22 :== R2I || real -> int
StdInt.toInt_23 :== S2I || str -> int
StdInt.fromInt_25 :== I2C 
StdInt.fromInt_26 !a_0 = a_0 || int -> real 
StdInt.fromInt_27 :== I2S
StdInt.rem_28 :== mod
StdInt.gcdnat_32 !x_0 !x_1 = case (eqI 0 x_1) (True -> x_0) (False -> StdInt.gcdnat_32 x_1 (mod x_0 x_1))
StdInt.gcd_29 !x_0 !y_1 = StdInt.gcdnat_32 (absI x_0) (absI y_1)
StdInt.lcm_30 !x_0 !x_1 = case (eqI 0 x_1) (True -> 0) (False -> case (eqI 0 x_0) (True -> 0) (False -> absI (multI (divI x_0 (StdInt.gcd_29 x_0 _x_1)) x_1)))
